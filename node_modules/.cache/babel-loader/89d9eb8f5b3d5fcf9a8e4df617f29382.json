{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamchazan/Documents/hcil-site/src/components/notebook/cell.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CellName from \"./cellname\";\nimport CellDescription from \"./celldescription\";\nimport CellType from \"./celltype\";\nimport firebase from \"firebase\";\nimport { CELL_TYPES } from \"../../constants.js\";\nimport CalculationCell from \"./calculationcell\";\nimport ChartCell from \"./chartcell\";\nimport DataCell from \"./datacell\";\n\nfunction Cell({\n  cellID\n}) {\n  _s();\n\n  const [cell, setCell] = useState(null);\n  useEffect(() => {\n    var cellRef = firebase.database().ref(\"cells/\" + cellID);\n    cellRef.on(\"value\", snapshot => {\n      const data = snapshot.val();\n      setCell(data);\n    });\n  }, [cellID]);\n\n  if (cell == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  let cellOutput;\n\n  switch (cell.type) {\n    case CELL_TYPES.calculation:\n      cellOutput = /*#__PURE__*/_jsxDEV(CalculationCell, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 20\n      }, this);\n      break;\n\n    case CELL_TYPES.chart:\n      cellOutput = /*#__PURE__*/_jsxDEV(ChartCell, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }, this);\n      break;\n\n    case CELL_TYPES.loadData:\n      cellOutput = /*#__PURE__*/_jsxDEV(DataCell, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 20\n      }, this);\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-options\",\n      children: [/*#__PURE__*/_jsxDEV(CellName, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell-input\",\n        children: \"Input: [cellname]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CellType, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-output\",\n      children: cellOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CellDescription, {\n      cell: cell,\n      cellID: cellID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Cell, \"qutEQB42oKBUPhna9s7S0FlRCIU=\");\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/components/notebook/cell.js"],"names":["React","useState","useEffect","CellName","CellDescription","CellType","firebase","CELL_TYPES","CalculationCell","ChartCell","DataCell","Cell","cellID","cell","setCell","cellRef","database","ref","on","snapshot","data","val","cellOutput","type","calculation","chart","loadData"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA0B;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,OAAO,GAAGT,QAAQ,CAACU,QAAT,GAAoBC,GAApB,CAAwB,WAAWL,MAAnC,CAAd;AACAG,IAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,YAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;AACAP,MAAAA,OAAO,CAACM,IAAD,CAAP;AACD,KAHD;AAID,GANQ,EAMN,CAACR,MAAD,CANM,CAAT;;AAQA,MAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChB,wBAAO;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIS,UAAJ;;AACA,UAAQT,IAAI,CAACU,IAAb;AACE,SAAKhB,UAAU,CAACiB,WAAhB;AACEF,MAAAA,UAAU,gBAAG,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAET,IAAvB;AAA6B,QAAA,MAAM,EAAED;AAArC;AAAA;AAAA;AAAA;AAAA,cAAb;AACA;;AACF,SAAKL,UAAU,CAACkB,KAAhB;AACEH,MAAAA,UAAU,gBAAG,QAAC,SAAD;AAAW,QAAA,IAAI,EAAET,IAAjB;AAAuB,QAAA,MAAM,EAAED;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAb;AACA;;AACF,SAAKL,UAAU,CAACmB,QAAhB;AACEJ,MAAAA,UAAU,gBAAG,QAAC,QAAD;AAAU,QAAA,IAAI,EAAET,IAAhB;AAAsB,QAAA,MAAM,EAAED;AAA9B;AAAA;AAAA;AAAA;AAAA,cAAb;AACA;AATJ;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEC,IAAhB;AAAsB,QAAA,MAAM,EAAED;AAA9B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEC,IAAhB;AAAsB,QAAA,MAAM,EAAED;AAA9B;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8BU;AAA9B;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAET,IAAvB;AAA6B,MAAA,MAAM,EAAED;AAArC;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAvCQD,I;;KAAAA,I;AAyCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CellName from \"./cellname\";\nimport CellDescription from \"./celldescription\";\nimport CellType from \"./celltype\";\nimport firebase from \"firebase\";\nimport { CELL_TYPES } from \"../../constants.js\";\n\nimport CalculationCell from \"./calculationcell\";\nimport ChartCell from \"./chartcell\";\nimport DataCell from \"./datacell\";\n\nfunction Cell({ cellID }) {\n  const [cell, setCell] = useState(null);\n\n  useEffect(() => {\n    var cellRef = firebase.database().ref(\"cells/\" + cellID);\n    cellRef.on(\"value\", (snapshot) => {\n      const data = snapshot.val();\n      setCell(data);\n    });\n  }, [cellID]);\n\n  if (cell == null) {\n    return <div className=\"cell-container\">Loading...</div>;\n  }\n\n  let cellOutput;\n  switch (cell.type) {\n    case CELL_TYPES.calculation:\n      cellOutput = <CalculationCell cell={cell} cellID={cellID} />;\n      break;\n    case CELL_TYPES.chart:\n      cellOutput = <ChartCell cell={cell} cellID={cellID} />;\n      break;\n    case CELL_TYPES.loadData:\n      cellOutput = <DataCell cell={cell} cellID={cellID} />;\n      break;\n  }\n\n  return (\n    <div className=\"cell-container\">\n      <div className=\"cell-options\">\n        <CellName cell={cell} cellID={cellID} />\n        <div className=\"cell-input\">Input: [cellname]</div>\n        <CellType cell={cell} cellID={cellID} />\n      </div>\n      <div className=\"cell-output\">{cellOutput}</div>\n      <CellDescription cell={cell} cellID={cellID} />\n    </div>\n  );\n}\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}