{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\nexport function useCellCalculations(notebook) {\n  _s();\n\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n  const [hasFetched, setHasFetched] = useState({});\n  console.log(cells);\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (hasFetched[cellID]) {\n        continue;\n      }\n\n      setHasFetched(hasFetched => ({ ...hasFetched,\n        [cellID]: true\n      }));\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", snapshot => {\n        const data = snapshot.val();\n        setCells(cells => ({ ...cells,\n          [cellID]: data\n        }));\n      });\n    }\n  }, [notebook, cells]);\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n\n    let hasMissingCell = false;\n\n    for (const i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (cells[cellID] == null) {\n        hasMissingCell = true;\n        break;\n      }\n    }\n\n    console.log(\"calculating useeffect\");\n\n    if (hasMissingCell == false) {\n      setResults(docalculations(cells, notebook.cells));\n    }\n  }, [notebook, cells]);\n  return {\n    cells,\n    results\n  };\n}\n\n_s(useCellCalculations, \"Zoqxv07dReOTW3SarvQrkXkYo/w=\");","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/components/notebook/usecellcalculations.js"],"names":["useEffect","useState","docalculations","firebase","useCellCalculations","notebook","cells","setCells","results","setResults","hasFetched","setHasFetched","console","log","i","cellID","cellRef","database","ref","on","snapshot","data","val","hasMissingCell"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACD;;AACD,SAAK,IAAIS,CAAT,IAAcT,QAAQ,CAACC,KAAvB,EAA8B;AAC5B,YAAMS,MAAM,GAAGV,QAAQ,CAACC,KAAT,CAAeQ,CAAf,CAAf;;AAEA,UAAIJ,UAAU,CAACK,MAAD,CAAd,EAAwB;AACtB;AACD;;AAEDJ,MAAAA,aAAa,CAAED,UAAD,KAAiB,EAAE,GAAGA,UAAL;AAAiB,SAACK,MAAD,GAAU;AAA3B,OAAjB,CAAD,CAAb;AAEA,UAAIC,OAAO,GAAGb,QAAQ,CAACc,QAAT,GAAoBC,GAApB,CAAwB,WAAWH,MAAnC,CAAd;AACAC,MAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,cAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;AACAf,QAAAA,QAAQ,CAAED,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAY,WAACS,MAAD,GAAUM;AAAtB,SAAZ,CAAD,CAAR;AACD,OAHD;AAID;AACF,GAnBQ,EAmBN,CAAChB,QAAD,EAAWC,KAAX,CAnBM,CAAT;AAqBAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACD;;AAED,QAAIkB,cAAc,GAAG,KAArB;;AACA,SAAK,MAAMT,CAAX,IAAgBT,QAAQ,CAACC,KAAzB,EAAgC;AAC9B,YAAMS,MAAM,GAAGV,QAAQ,CAACC,KAAT,CAAeQ,CAAf,CAAf;;AAEA,UAAIR,KAAK,CAACS,MAAD,CAAL,IAAiB,IAArB,EAA2B;AACzBQ,QAAAA,cAAc,GAAG,IAAjB;AAEA;AACD;AACF;;AACDX,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AAEA,QAAIU,cAAc,IAAI,KAAtB,EAA6B;AAC3Bd,MAAAA,UAAU,CAACP,cAAc,CAACI,KAAD,EAAQD,QAAQ,CAACC,KAAjB,CAAf,CAAV;AACD;AACF,GApBQ,EAoBN,CAACD,QAAD,EAAWC,KAAX,CApBM,CAAT;AAsBA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD;;GAnDeJ,mB","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\n\nexport function useCellCalculations(notebook) {\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n  const [hasFetched, setHasFetched] = useState({});\n\n  console.log(cells);\n\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (hasFetched[cellID]) {\n        continue;\n      }\n\n      setHasFetched((hasFetched) => ({ ...hasFetched, [cellID]: true }));\n\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", (snapshot) => {\n        const data = snapshot.val();\n        setCells((cells) => ({ ...cells, [cellID]: data }));\n      });\n    }\n  }, [notebook, cells]);\n\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n\n    let hasMissingCell = false;\n    for (const i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (cells[cellID] == null) {\n        hasMissingCell = true;\n\n        break;\n      }\n    }\n    console.log(\"calculating useeffect\");\n\n    if (hasMissingCell == false) {\n      setResults(docalculations(cells, notebook.cells));\n    }\n  }, [notebook, cells]);\n\n  return { cells, results };\n}\n"]},"metadata":{},"sourceType":"module"}