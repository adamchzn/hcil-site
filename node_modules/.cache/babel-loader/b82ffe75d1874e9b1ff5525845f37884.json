{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\nexport function useCellCalculations(notebook) {\n  _s();\n\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n  console.log(cells);\n  useEffect(() => {\n    if (notebook == null || Object.keys(cells).length > 0) {\n      return;\n    }\n\n    console.log(\"loading useeffect\");\n\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", snapshot => {\n        const data = snapshot.val();\n        setCells({ ...cells,\n          cellID: data\n        });\n      });\n    }\n  }, [notebook, cells]); //   useEffect(() => {\n  //     if (notebook == null) {\n  //         return;\n  //     }\n  //     let hasMissingCell = false;\n  //     for (const i in notebook.cells) {\n  //       const cellID = notebook.cells[i];\n  //       if (cells[cellID] == null) {\n  //         hasMissingCell = true;\n  //         break;\n  //       }\n  //     }\n  //     console.log(\"calculating useeffect\");\n  //     if (hasMissingCell == false) {\n  //       setResults(docalculations(cells, notebook.cells));\n  //     }\n  //   }, [notebook, cells]);\n\n  return {\n    cells,\n    results\n  };\n}\n\n_s(useCellCalculations, \"BRfYaWVd5BD/Iqi82CtZJox60+M=\");","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/components/notebook/usecellcalculations.js"],"names":["useEffect","useState","docalculations","firebase","useCellCalculations","notebook","cells","setCells","results","setResults","console","log","Object","keys","length","i","cellID","cellRef","database","ref","on","snapshot","data","val"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAI,IAAZ,IAAoBO,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,MAAnB,GAA4B,CAApD,EAAuD;AACrD;AACD;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,SAAK,IAAII,CAAT,IAAcV,QAAQ,CAACC,KAAvB,EAA8B;AAC5B,YAAMU,MAAM,GAAGX,QAAQ,CAACC,KAAT,CAAeS,CAAf,CAAf;AAEA,UAAIE,OAAO,GAAGd,QAAQ,CAACe,QAAT,GAAoBC,GAApB,CAAwB,WAAWH,MAAnC,CAAd;AACAC,MAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,cAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;AACAhB,QAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYU,UAAAA,MAAM,EAAEM;AAApB,SAAD,CAAR;AACD,OAHD;AAID;AACF,GAdQ,EAcN,CAACjB,QAAD,EAAWC,KAAX,CAdM,CAAT,CAN4C,CAsB5C;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD;;GA7CeJ,mB","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\n\nexport function useCellCalculations(notebook) {\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n\n  console.log(cells);\n\n  useEffect(() => {\n    if (notebook == null || Object.keys(cells).length > 0) {\n      return;\n    }\n    console.log(\"loading useeffect\");\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", (snapshot) => {\n        const data = snapshot.val();\n        setCells({ ...cells, cellID: data });\n      });\n    }\n  }, [notebook, cells]);\n\n  //   useEffect(() => {\n  //     if (notebook == null) {\n  //         return;\n  //     }\n\n  //     let hasMissingCell = false;\n  //     for (const i in notebook.cells) {\n  //       const cellID = notebook.cells[i];\n\n  //       if (cells[cellID] == null) {\n  //         hasMissingCell = true;\n\n  //         break;\n  //       }\n  //     }\n  //     console.log(\"calculating useeffect\");\n\n  //     if (hasMissingCell == false) {\n  //       setResults(docalculations(cells, notebook.cells));\n  //     }\n  //   }, [notebook, cells]);\n\n  return { cells, results };\n}\n"]},"metadata":{},"sourceType":"module"}