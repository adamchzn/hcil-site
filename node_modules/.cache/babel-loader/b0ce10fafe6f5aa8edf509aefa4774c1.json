{"ast":null,"code":"import { CALCULATIONS, CELL_TYPES } from \"./constants.js\"; // calculate mean\n\nexport function mean(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let sum = 0;\n\n    for (let i in column) {\n      sum += column[i];\n    }\n\n    const mean = sum / column.length;\n    output[columnID] = [mean];\n  }\n\n  return output;\n} // calculate median\n\nexport function median(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let midpoint = 0;\n    let median = 0;\n\n    if (column.length % 2 === 0) {\n      //even\n      midpoint = column.length / 2; // need to order by value first\n\n      const sorted = [...column].sort((a, b) => a - b);\n      median = (sorted[midpoint] + sorted[midpoint - 1]) / 2;\n    }\n\n    if (column.length % 2 === 1) {\n      //odd\n      midpoint = Math.floor(column.length / 2); // need to order by value first\n\n      const sorted = [...column].sort();\n      median = sorted[midpoint];\n    }\n\n    output[columnID] = [median];\n  }\n\n  return output;\n} // calculate maximum\n\nexport function max(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let max = 0;\n\n    for (let i in column) {\n      if (column[i] > max) {\n        max = column[i];\n      }\n    }\n\n    output[columnID] = [max];\n  }\n\n  return output;\n} // calculate minimum\n\nexport function min(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let min = column[0];\n\n    for (let i in column) {\n      if (column[i] < min) {\n        min = column[i];\n      }\n    }\n\n    output[columnID] = [min];\n  }\n\n  return output;\n} // create template data\n\nexport function dumbdata() {\n  const data = {\n    columnOne: [10, 4, 6, 5, 3, 2, 35, 6, 7, 4],\n    columnTwo: [32, 4, 7, 11, 27, 1, 4, 15, 5, 2],\n    columnThree: [8, 4, 3, 6, 77, 33, 56, 2, 1, 3]\n  };\n  return data;\n} // perform calculation\n\nexport function docalculations(cells, cellIDs) {\n  const results = {};\n\n  for (const i in cellIDs) {\n    const input = i === 0 ? {} : results[cellIDs[i - 1]];\n    let output;\n    const cellID = cellIDs[i];\n\n    switch (cells[cellID].type) {\n      case CELL_TYPES.calculation:\n        switch (cells[cellID].calculation) {\n          case CALCULATIONS.mean:\n            output = mean(input);\n            break;\n\n          case CALCULATIONS.median:\n            output = median(input);\n            break;\n\n          case CALCULATIONS.min:\n            output = min(input);\n            break;\n\n          case CALCULATIONS.max:\n            output = max(input);\n            break;\n        }\n\n        break;\n\n      case CELL_TYPES.chart:\n        output = {};\n        break;\n\n      case CELL_TYPES.loadData:\n        output = dumbdata();\n        break;\n    }\n\n    results[cellID] = output;\n  }\n\n  return results;\n}","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/calculations.js"],"names":["CALCULATIONS","CELL_TYPES","mean","input","output","columnID","column","sum","i","length","median","midpoint","sorted","sort","a","b","Math","floor","max","min","dumbdata","data","columnOne","columnTwo","columnThree","docalculations","cells","cellIDs","results","cellID","type","calculation","chart","loadData"],"mappings":"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","sourcesContent":["import { CALCULATIONS, CELL_TYPES } from \"./constants.js\";\n\n// calculate mean\nexport function mean(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let sum = 0;\n    for (let i in column) {\n      sum += column[i];\n    }\n\n    const mean = sum / column.length;\n    output[columnID] = [mean];\n  }\n\n  return output;\n}\n\n// calculate median\nexport function median(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let midpoint = 0;\n    let median = 0;\n    if (column.length % 2 === 0) {\n      //even\n      midpoint = column.length / 2;\n\n      // need to order by value first\n      const sorted = [...column].sort((a, b) => a - b);\n      median = (sorted[midpoint] + sorted[midpoint - 1]) / 2;\n    }\n\n    if (column.length % 2 === 1) {\n      //odd\n      midpoint = Math.floor(column.length / 2);\n\n      // need to order by value first\n      const sorted = [...column].sort();\n      median = sorted[midpoint];\n    }\n    output[columnID] = [median];\n  }\n  return output;\n}\n\n// calculate maximum\nexport function max(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let max = 0;\n    for (let i in column) {\n      if (column[i] > max) {\n        max = column[i];\n      }\n    }\n    output[columnID] = [max];\n  }\n  return output;\n}\n\n// calculate minimum\nexport function min(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let min = column[0];\n    for (let i in column) {\n      if (column[i] < min) {\n        min = column[i];\n      }\n    }\n    output[columnID] = [min];\n  }\n  return output;\n}\n\n// create template data\nexport function dumbdata() {\n  const data = {\n    columnOne: [10, 4, 6, 5, 3, 2, 35, 6, 7, 4],\n    columnTwo: [32, 4, 7, 11, 27, 1, 4, 15, 5, 2],\n    columnThree: [8, 4, 3, 6, 77, 33, 56, 2, 1, 3],\n  };\n\n  return data;\n}\n\n// perform calculation\nexport function docalculations(cells, cellIDs) {\n  const results = {};\n\n  for (const i in cellIDs) {\n    const input = i === 0 ? {} : results[cellIDs[i - 1]];\n\n    let output;\n    const cellID = cellIDs[i];\n    switch (cells[cellID].type) {\n      case CELL_TYPES.calculation:\n        switch (cells[cellID].calculation) {\n          case CALCULATIONS.mean:\n            output = mean(input);\n            break;\n          case CALCULATIONS.median:\n            output = median(input);\n            break;\n          case CALCULATIONS.min:\n            output = min(input);\n            break;\n          case CALCULATIONS.max:\n            output = max(input);\n            break;\n        }\n        break;\n      case CELL_TYPES.chart:\n        output = {};\n        break;\n      case CELL_TYPES.loadData:\n        output = dumbdata();\n        break;\n    }\n    results[cellID] = output;\n  }\n  return results;\n}\n"]},"metadata":{},"sourceType":"module"}