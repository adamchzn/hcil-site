{"ast":null,"code":"import Notebook from \"./components/notebook/notebook\";\nimport { CELL_TYPES } from \"./constants.js\";\nexport function mean(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let sum = 0;\n\n    for (let i in column) {\n      sum += column[i];\n    }\n\n    const mean = sum / column.length;\n    output[columnID] = [mean];\n  }\n\n  return output;\n}\nexport function max(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let max = 0;\n\n    for (let i in column) {\n      if (column[i] > max) {\n        max = column[i];\n      }\n    }\n\n    output[columnID] = max;\n  }\n\n  return output;\n}\nexport function dumbdata() {\n  const data = {\n    columnOne: [1, 4, 6, 5, 3, 2, 35, 6, 7, 4],\n    columnThree: [8, 4, 3, 6, 77, 33, 56, 2, 1]\n  };\n  return data;\n}\nexport function docalculations(cells, cellIDs) {\n  const results = {};\n\n  for (const i in cellIDs) {\n    const input = i == 0 ? {} : results[cellIDs[i - 1]];\n    let output;\n    const cellID = cellIDs[i];\n\n    switch (cells[cellID].type) {\n      case CELL_TYPES.calculation:\n        output = mean(input);\n        break;\n\n      case CELL_TYPES.chart:\n        output = {};\n        break;\n\n      case CELL_TYPES.loadData:\n        output = dumbdata();\n        break;\n    }\n\n    results[cellID] = output;\n  }\n\n  return results;\n}","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/calculations.js"],"names":["Notebook","CELL_TYPES","mean","input","output","columnID","column","sum","i","length","max","dumbdata","data","columnOne","columnThree","docalculations","cells","cellIDs","results","cellID","type","calculation","chart","loadData"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAC1B,QAAMC,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAMC,QAAX,IAAuBF,KAAvB,EAA8B;AAC5B,UAAMG,MAAM,GAAGH,KAAK,CAACE,QAAD,CAApB;AAEA,QAAIE,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,CAAT,IAAcF,MAAd,EAAsB;AACpBC,MAAAA,GAAG,IAAID,MAAM,CAACE,CAAD,CAAb;AACD;;AAED,UAAMN,IAAI,GAAGK,GAAG,GAAGD,MAAM,CAACG,MAA1B;AACAL,IAAAA,MAAM,CAACC,QAAD,CAAN,GAAmB,CAACH,IAAD,CAAnB;AACD;;AAED,SAAOE,MAAP;AACD;AAED,OAAO,SAASM,GAAT,CAAaP,KAAb,EAAoB;AACvB,QAAMC,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAMC,QAAX,IAAuBF,KAAvB,EAA8B;AAC1B,UAAMG,MAAM,GAAGH,KAAK,CAACE,QAAD,CAApB;AAEA,QAAIK,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIF,CAAT,IAAcF,MAAd,EAAsB;AAClB,UAAIA,MAAM,CAACE,CAAD,CAAN,GAAYE,GAAhB,EAAqB;AACjBA,QAAAA,GAAG,GAAGJ,MAAM,CAACE,CAAD,CAAZ;AACH;AACJ;;AAEDJ,IAAAA,MAAM,CAACC,QAAD,CAAN,GAAmBK,GAAnB;AACH;;AAED,SAAON,MAAP;AACH;AAED,OAAO,SAASO,QAAT,GAAoB;AACzB,QAAMC,IAAI,GAAG;AACXC,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CADA;AAEXC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,CAAzB,EAA4B,CAA5B;AAFF,GAAb;AAKA,SAAOF,IAAP;AACD;AAED,OAAO,SAASG,cAAT,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwC;AAC7C,QAAMC,OAAO,GAAG,EAAhB;;AAEA,OAAK,MAAMV,CAAX,IAAgBS,OAAhB,EAAyB;AACvB,UAAMd,KAAK,GAAIK,CAAC,IAAI,CAAL,GAAS,EAAT,GAAcU,OAAO,CAACD,OAAO,CAACT,CAAC,GAAG,CAAL,CAAR,CAApC;AAEA,QAAIJ,MAAJ;AACA,UAAMe,MAAM,GAAGF,OAAO,CAACT,CAAD,CAAtB;;AACA,YAAQQ,KAAK,CAACG,MAAD,CAAL,CAAcC,IAAtB;AACE,WAAKnB,UAAU,CAACoB,WAAhB;AACEjB,QAAAA,MAAM,GAAGF,IAAI,CAACC,KAAD,CAAb;AACA;;AACF,WAAKF,UAAU,CAACqB,KAAhB;AACElB,QAAAA,MAAM,GAAG,EAAT;AACA;;AACF,WAAKH,UAAU,CAACsB,QAAhB;AACEnB,QAAAA,MAAM,GAAGO,QAAQ,EAAjB;AACA;AATJ;;AAWAO,IAAAA,OAAO,CAACC,MAAD,CAAP,GAAkBf,MAAlB;AACD;;AACD,SAAOc,OAAP;AACD","sourcesContent":["import Notebook from \"./components/notebook/notebook\";\nimport { CELL_TYPES } from \"./constants.js\";\n\nexport function mean(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let sum = 0;\n    for (let i in column) {\n      sum += column[i];\n    }\n\n    const mean = sum / column.length;\n    output[columnID] = [mean];\n  }\n\n  return output;\n}\n\nexport function max(input) {\n    const output = {};\n\n    for (const columnID in input) {\n        const column = input[columnID];\n        \n        let max = 0;\n        for (let i in column) {\n            if (column[i] > max) {\n                max = column[i]\n            }\n        }\n\n        output[columnID] = max;\n    }\n    \n    return output;\n}\n\nexport function dumbdata() {\n  const data = {\n    columnOne: [1, 4, 6, 5, 3, 2, 35, 6, 7, 4],\n    columnThree: [8, 4, 3, 6, 77, 33, 56, 2, 1],\n  };\n\n  return data;\n}\n\nexport function docalculations(cells, cellIDs) {\n  const results = {};\n\n  for (const i in cellIDs) {\n    const input = (i == 0 ? {} : results[cellIDs[i - 1]]);\n\n    let output;\n    const cellID = cellIDs[i];\n    switch (cells[cellID].type) {\n      case CELL_TYPES.calculation:\n        output = mean(input);\n        break;\n      case CELL_TYPES.chart:\n        output = {};\n        break;\n      case CELL_TYPES.loadData:\n        output = dumbdata();\n        break;\n    }\n    results[cellID] = output;\n  }\n  return results;\n}\n"]},"metadata":{},"sourceType":"module"}