{"ast":null,"code":"import Notebook from \"./components/notebook/notebook\";\nimport { CELL_TYPES } from \"./constants.js\";\nexport function mean(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let sum = 0;\n\n    for (let i in column) {\n      sum += column[i];\n    }\n\n    const mean = sum / column.length;\n    output[columnID] = [mean];\n  }\n\n  return output;\n}\nexport function median(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let midpoint = 0;\n    let median = 0;\n\n    if (column.length % 2 == 0) {\n      //even\n      midpoint = column.length / 2;\n\n      for (let i in column) {\n        // need to order by value first\n        if (i == midpoint) {\n          median = (column[i] + column[i + 1]) / 2;\n        }\n      }\n    }\n\n    if (column.length % 2 == 1) {\n      //odd\n      midpoint = Math.ceil(column.length / 2);\n\n      for (let i in column) {\n        // need to order by value first\n        if (i == midpoint) {\n          median = (column[i] + column[i + 1]) / 2;\n        }\n      }\n    }\n  }\n}\nexport function max(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let max = 0;\n\n    for (let i in column) {\n      if (column[i] > max) {\n        max = column[i];\n      }\n    }\n\n    output[columnID] = max;\n  }\n\n  return output;\n}\nexport function min(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n    let min = 0;\n\n    for (let i in column) {\n      if (column[i] < max) {\n        min = column[i];\n      }\n    }\n\n    output[columnID] = min;\n  }\n\n  return output;\n}\nexport function dumbdata() {\n  const data = {\n    columnOne: [1, 4, 6, 5, 3, 2, 35, 6, 7, 4],\n    columnThree: [8, 4, 3, 6, 77, 33, 56, 2, 1]\n  };\n  return data;\n}\nexport function docalculations(cells, cellIDs) {\n  const results = {};\n\n  for (const i in cellIDs) {\n    const input = i == 0 ? {} : results[cellIDs[i - 1]];\n    let output;\n    const cellID = cellIDs[i];\n\n    switch (cells[cellID].type) {\n      case CELL_TYPES.calculation:\n        output = mean(input);\n        break;\n\n      case CELL_TYPES.chart:\n        output = {};\n        break;\n\n      case CELL_TYPES.loadData:\n        output = dumbdata();\n        break;\n    }\n\n    results[cellID] = output;\n  }\n\n  return results;\n}","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/calculations.js"],"names":["Notebook","CELL_TYPES","mean","input","output","columnID","column","sum","i","length","median","midpoint","Math","ceil","max","min","dumbdata","data","columnOne","columnThree","docalculations","cells","cellIDs","results","cellID","type","calculation","chart","loadData"],"mappings":"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","sourcesContent":["import Notebook from \"./components/notebook/notebook\";\nimport { CELL_TYPES } from \"./constants.js\";\n\nexport function mean(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let sum = 0;\n    for (let i in column) {\n      sum += column[i];\n    }\n\n    const mean = sum / column.length;\n    output[columnID] = [mean];\n  }\n\n  return output;\n}\n\nexport function median(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let midpoint = 0;\n    let median = 0;\n    if (column.length % 2 == 0) {\n      //even\n      midpoint = column.length / 2;\n      for (let i in column) {\n          // need to order by value first\n        \n          if (i == midpoint) {\n              median = (column[i] + column[i + 1]) / 2\n          }\n      } \n    }\n\n    if (column.length % 2 == 1) {\n        //odd\n        midpoint = Math.ceil(column.length / 2);\n        for (let i in column) {\n            // need to order by value first\n  \n            if (i == midpoint) {\n                median = (column[i] + column[i + 1]) / 2\n            }\n        } \n      }\n  }\n}\n\nexport function max(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let max = 0;\n    for (let i in column) {\n      if (column[i] > max) {\n        max = column[i];\n      }\n    }\n\n    output[columnID] = max;\n  }\n\n  return output;\n}\n\nexport function min(input) {\n  const output = {};\n\n  for (const columnID in input) {\n    const column = input[columnID];\n\n    let min = 0;\n    for (let i in column) {\n      if (column[i] < max) {\n        min = column[i];\n      }\n    }\n\n    output[columnID] = min;\n  }\n\n  return output;\n}\n\nexport function dumbdata() {\n  const data = {\n    columnOne: [1, 4, 6, 5, 3, 2, 35, 6, 7, 4],\n    columnThree: [8, 4, 3, 6, 77, 33, 56, 2, 1],\n  };\n\n  return data;\n}\n\nexport function docalculations(cells, cellIDs) {\n  const results = {};\n\n  for (const i in cellIDs) {\n    const input = i == 0 ? {} : results[cellIDs[i - 1]];\n\n    let output;\n    const cellID = cellIDs[i];\n    switch (cells[cellID].type) {\n      case CELL_TYPES.calculation:\n        output = mean(input);\n        break;\n      case CELL_TYPES.chart:\n        output = {};\n        break;\n      case CELL_TYPES.loadData:\n        output = dumbdata();\n        break;\n    }\n    results[cellID] = output;\n  }\n  return results;\n}\n"]},"metadata":{},"sourceType":"module"}