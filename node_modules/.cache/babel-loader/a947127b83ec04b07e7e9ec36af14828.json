{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adamchazan/Documents/hcil-site/src/components/notebook/cell.js\";\nimport React, { useState, useEffect } from \"react\";\nimport CellName from \"./cellname\";\nimport CellDescription from \"./celldescription\";\nimport CellType from \"./celltype\";\nimport { CELL_TYPES } from \"../../constants.js\";\nimport CalculationCell from \"./calculationcell\";\nimport ChartCell from \"./chartcell\";\nimport DataCell from \"./datacell\";\nimport CellMenuPopup from \"./cellmenu\";\nimport Options from \"./../../images/options.svg\";\nimport CalculationsMenu from \"./calculationsmenu.js\";\n\nfunction Cell({\n  cellID,\n  cell,\n  data,\n  setPopupShown\n}) {\n  // const [popupShown, setPopupShown] = useState(false);\n  if (cell == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  let cellOutput;\n\n  switch (cell.type) {\n    case CELL_TYPES.calculation:\n      cellOutput = /*#__PURE__*/_jsxDEV(CalculationCell, {\n        cell: cell,\n        cellID: cellID,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }, this);\n      break;\n\n    case CELL_TYPES.chart:\n      cellOutput = /*#__PURE__*/_jsxDEV(ChartCell, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 20\n      }, this);\n      break;\n\n    case CELL_TYPES.loadData:\n      cellOutput = /*#__PURE__*/_jsxDEV(DataCell, {\n        cell: cell,\n        cellID: cellID,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 20\n      }, this);\n      break;\n  }\n\n  let cellOperation;\n\n  switch (cell.type) {\n    case CELL_TYPES.calculation:\n      cellOperation = cell.calculation == null ? \"Choose calculation\" : \"Calculating\" + \" \" + cell.calculation;\n      break;\n\n    case CELL_TYPES.chart:\n      cellOperation = \"Displaying chart\";\n      break;\n\n    case CELL_TYPES.loadData:\n      cellOperation = \"Loading data\";\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell-options\",\n        children: [/*#__PURE__*/_jsxDEV(CellName, {\n          cell: cell,\n          cellID: cellID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell-operation\",\n          children: [\" \", cellOperation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CellType, {\n          cell: cell,\n          cellID: cellID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"cell-menu\",\n          src: Options,\n          onClick: () => setPopupShown(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell-output\",\n        children: cellOutput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CellDescription, {\n        cell: cell,\n        cellID: cellID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), cell.type == \"Calculation\" ?\n    /*#__PURE__*/\n\n    /* <div className=\"calculations-menu-bg\" > */\n    _jsxDEV(CalculationsMenu, {\n      setPopupHidden: () => setPopupShown(false),\n      cell: cell,\n      cellID: cellID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/components/notebook/cell.js"],"names":["React","useState","useEffect","CellName","CellDescription","CellType","CELL_TYPES","CalculationCell","ChartCell","DataCell","CellMenuPopup","CalculationsMenu","Cell","cellID","cell","data","setPopupShown","cellOutput","type","calculation","chart","loadData","cellOperation","Options"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CellName from \"./cellname\";\nimport CellDescription from \"./celldescription\";\nimport CellType from \"./celltype\";\nimport { CELL_TYPES } from \"../../constants.js\";\n\nimport CalculationCell from \"./calculationcell\";\nimport ChartCell from \"./chartcell\";\nimport DataCell from \"./datacell\";\nimport CellMenuPopup from \"./cellmenu\";\nimport Options from \"./../../images/options.svg\";\nimport CalculationsMenu from \"./calculationsmenu.js\";\n\nfunction Cell({ cellID, cell, data, setPopupShown }) {\n  // const [popupShown, setPopupShown] = useState(false);\n\n  if (cell == null) {\n    return <div className=\"cell-container\">Loading...</div>;\n  }\n\n  let cellOutput;\n  switch (cell.type) {\n    case CELL_TYPES.calculation:\n      cellOutput = <CalculationCell cell={cell} cellID={cellID} data={data} />;\n      break;\n    case CELL_TYPES.chart:\n      cellOutput = <ChartCell cell={cell} cellID={cellID} />;\n      break;\n    case CELL_TYPES.loadData:\n      cellOutput = <DataCell cell={cell} cellID={cellID} data={data} />;\n      break;\n  }\n\n  let cellOperation;\n  switch (cell.type) {\n    case CELL_TYPES.calculation:\n      cellOperation =\n        cell.calculation == null\n          ? \"Choose calculation\"\n          : \"Calculating\" + \" \" + cell.calculation;\n      break;\n    case CELL_TYPES.chart:\n      cellOperation = \"Displaying chart\";\n      break;\n    case CELL_TYPES.loadData:\n      cellOperation = \"Loading data\";\n      break;\n  }\n\n  return (\n    <>\n      <div className=\"cell-container\">\n        <div className=\"cell-options\">\n          <CellName cell={cell} cellID={cellID} />\n          <div className=\"cell-operation\"> {cellOperation}</div>\n          <CellType cell={cell} cellID={cellID} />\n          <img\n            className=\"cell-menu\"\n            src={Options}\n            onClick={() => setPopupShown(true)}\n          ></img>\n        </div>\n        <div className=\"cell-output\">{cellOutput}</div>\n        <CellDescription cell={cell} cellID={cellID} />\n      </div>\n      {cell.type == \"Calculation\" ? (\n        /* <div className=\"calculations-menu-bg\" > */\n        <CalculationsMenu\n          setPopupHidden={() => setPopupShown(false)}\n          cell={cell}\n          cellID={cellID}\n        />\n      ) : null}\n    </>\n  );\n}\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}