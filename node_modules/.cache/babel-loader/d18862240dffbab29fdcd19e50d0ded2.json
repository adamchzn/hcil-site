{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\nexport function useCellCalculations(notebook) {\n  _s();\n\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n  const [hasFetched, setHasFetched] = useState({});\n  console.log(cells);\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n\n    console.log(\"loading useeffect\");\n\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (hasFetched[cellID]) {\n        continue;\n      }\n\n      setHasFetched(hasFetched => ({ ...hasFetched,\n        [cellID]: true\n      }));\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", snapshot => {\n        const data = snapshot.val();\n        setCells(cells => ({ ...cells,\n          [cellID]: data\n        }));\n      });\n    }\n  }, [notebook, cells]); //   useEffect(() => {\n  //     if (notebook == null) {\n  //         return;\n  //     }\n  //     let hasMissingCell = false;\n  //     for (const i in notebook.cells) {\n  //       const cellID = notebook.cells[i];\n  //       if (cells[cellID] == null) {\n  //         hasMissingCell = true;\n  //         break;\n  //       }\n  //     }\n  //     console.log(\"calculating useeffect\");\n  //     if (hasMissingCell == false) {\n  //       setResults(docalculations(cells, notebook.cells));\n  //     }\n  //   }, [notebook, cells]);\n\n  return {\n    cells,\n    results\n  };\n}\n\n_s(useCellCalculations, \"KrdaTulr4CZGrJeSYcH5JLBdjOA=\");","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/components/notebook/usecellcalculations.js"],"names":["useEffect","useState","docalculations","firebase","useCellCalculations","notebook","cells","setCells","results","setResults","hasFetched","setHasFetched","console","log","i","cellID","cellRef","database","ref","on","snapshot","data","val"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACD;;AACDO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,SAAK,IAAIC,CAAT,IAAcT,QAAQ,CAACC,KAAvB,EAA8B;AAC5B,YAAMS,MAAM,GAAGV,QAAQ,CAACC,KAAT,CAAeQ,CAAf,CAAf;;AAEA,UAAIJ,UAAU,CAACK,MAAD,CAAd,EAAwB;AACpB;AACH;;AAEDJ,MAAAA,aAAa,CAACD,UAAU,KAAK,EAAE,GAAGA,UAAL;AAAiB,SAACK,MAAD,GAAU;AAA3B,OAAL,CAAX,CAAb;AAEA,UAAIC,OAAO,GAAGb,QAAQ,CAACc,QAAT,GAAoBC,GAApB,CAAwB,WAAWH,MAAnC,CAAd;AACAC,MAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,cAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;AACAf,QAAAA,QAAQ,CAACD,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAY,WAACS,MAAD,GAAUM;AAAtB,SAAL,CAAN,CAAR;AACD,OAHD;AAID;AACF,GApBQ,EAoBN,CAAChB,QAAD,EAAWC,KAAX,CApBM,CAAT,CAP4C,CA6B5C;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD;;GApDeJ,mB","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\n\nexport function useCellCalculations(notebook) {\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n  const [hasFetched, setHasFetched] = useState({});\n\n  console.log(cells);\n\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n    console.log(\"loading useeffect\");\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n    \n      if (hasFetched[cellID]) {\n          continue;\n      }\n\n      setHasFetched(hasFetched => ({ ...hasFetched, [cellID]: true }))\n\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", (snapshot) => {\n        const data = snapshot.val();\n        setCells(cells => ({ ...cells, [cellID]: data }));\n      });\n    }\n  }, [notebook, cells]);\n\n  //   useEffect(() => {\n  //     if (notebook == null) {\n  //         return;\n  //     }\n\n  //     let hasMissingCell = false;\n  //     for (const i in notebook.cells) {\n  //       const cellID = notebook.cells[i];\n\n  //       if (cells[cellID] == null) {\n  //         hasMissingCell = true;\n\n  //         break;\n  //       }\n  //     }\n  //     console.log(\"calculating useeffect\");\n\n  //     if (hasMissingCell == false) {\n  //       setResults(docalculations(cells, notebook.cells));\n  //     }\n  //   }, [notebook, cells]);\n\n  return { cells, results };\n}\n"]},"metadata":{},"sourceType":"module"}