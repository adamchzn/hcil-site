{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\nexport function useCellCalculations(notebook) {\n  _s();\n\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n\n    console.log(\"loading useeffect\");\n\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", snapshot => {\n        const data = snapshot.val();\n        setCells({ ...cells,\n          cellID: data\n        });\n      });\n    }\n  }, [notebook, cells]);\n  useEffect(() => {\n    if (notebook == null) {\n      return;\n    }\n\n    let hasMissingCell = false;\n\n    for (const i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (cells[cellID] == null) {\n        hasMissingCell = true;\n        break;\n      }\n    }\n\n    console.log(\"calculating useeffect\");\n\n    if (hasMissingCell == false) {\n      setResults(docalculations(cells, notebook.cells));\n    }\n  }, [notebook, cells]);\n  return {\n    cells,\n    results\n  };\n}\n\n_s(useCellCalculations, \"aSmCPXb2C/iJ+WVgxmvovN2GjfI=\");","map":{"version":3,"sources":["/Users/adamchazan/Documents/hcil-site/src/components/notebook/usecellcalculations.js"],"names":["useEffect","useState","docalculations","firebase","useCellCalculations","notebook","cells","setCells","results","setResults","console","log","i","cellID","cellRef","database","ref","on","snapshot","data","val","hasMissingCell"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAI,IAAhB,EAAsB;AAClB;AACH;;AACDK,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,SAAK,IAAIC,CAAT,IAAcP,QAAQ,CAACC,KAAvB,EAA8B;AAC5B,YAAMO,MAAM,GAAGR,QAAQ,CAACC,KAAT,CAAeM,CAAf,CAAf;AAEA,UAAIE,OAAO,GAAGX,QAAQ,CAACY,QAAT,GAAoBC,GAApB,CAAwB,WAAWH,MAAnC,CAAd;AACAC,MAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,cAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb;AACAb,QAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYO,UAAAA,MAAM,EAAEM;AAApB,SAAD,CAAR;AACD,OAHD;AAID;AACF,GAdQ,EAcN,CAACd,QAAD,EAAWC,KAAX,CAdM,CAAT;AAgBAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAI,IAAhB,EAAsB;AAClB;AACH;;AAED,QAAIgB,cAAc,GAAG,KAArB;;AACA,SAAK,MAAMT,CAAX,IAAgBP,QAAQ,CAACC,KAAzB,EAAgC;AAC9B,YAAMO,MAAM,GAAGR,QAAQ,CAACC,KAAT,CAAeM,CAAf,CAAf;;AAEA,UAAIN,KAAK,CAACO,MAAD,CAAL,IAAiB,IAArB,EAA2B;AACzBQ,QAAAA,cAAc,GAAG,IAAjB;AAEA;AACD;AACF;;AACDX,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AAEA,QAAIU,cAAc,IAAI,KAAtB,EAA6B;AAC3BZ,MAAAA,UAAU,CAACP,cAAc,CAACI,KAAD,EAAQD,QAAQ,CAACC,KAAjB,CAAf,CAAV;AACD;AACF,GApBQ,EAoBN,CAACD,QAAD,EAAWC,KAAX,CApBM,CAAT;AAsBA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD;;GA3CeJ,mB","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react/cjs/react.development\";\nimport { docalculations } from \"../../calculations\";\nimport firebase from \"firebase\";\n\nexport function useCellCalculations(notebook) {\n  const [cells, setCells] = useState({});\n  const [results, setResults] = useState({});\n\n  useEffect(() => {\n    if (notebook == null) {\n        return;\n    }\n    console.log(\"loading useeffect\");\n    for (let i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      var cellRef = firebase.database().ref(\"cells/\" + cellID);\n      cellRef.on(\"value\", (snapshot) => {\n        const data = snapshot.val();\n        setCells({ ...cells, cellID: data });\n      });\n    }\n  }, [notebook, cells]);\n\n  useEffect(() => {\n    if (notebook == null) {\n        return;\n    }\n\n    let hasMissingCell = false;\n    for (const i in notebook.cells) {\n      const cellID = notebook.cells[i];\n\n      if (cells[cellID] == null) {\n        hasMissingCell = true;\n\n        break;\n      }\n    }\n    console.log(\"calculating useeffect\");\n\n    if (hasMissingCell == false) {\n      setResults(docalculations(cells, notebook.cells));\n    }\n  }, [notebook, cells]);\n\n  return { cells, results };\n}\n"]},"metadata":{},"sourceType":"module"}